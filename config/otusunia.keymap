#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        g {
            bindings = <&kp G>;
            key-positions = <4 12>;
            layers = <0>;
        };

        d {
            bindings = <&kp D>;
            key-positions = <13 5>;
            layers = <0>;
        };

        j {
            bindings = <&kp J>;
            key-positions = <6 14>;
            layers = <0>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <7 15>;
            layers = <0>;
        };

        w {
            bindings = <&kp W>;
            key-positions = <5 6>;
            layers = <0>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <5 4>;
            layers = <0>;
        };

        p {
            bindings = <&kp P>;
            key-positions = <12 18>;
            layers = <0>;
        };

        f {
            bindings = <&kp F>;
            key-positions = <18 19>;
            layers = <0>;
        };

        c {
            bindings = <&kp C>;
            key-positions = <4 5 6>;
            layers = <0>;
        };

        v {
            bindings = <&kp V>;
            key-positions = <19 15>;
            layers = <0>;
        };

        q {
            bindings = <&kp Q>;
            key-positions = <4 7 6 5>;
        };

        l {
            bindings = <&kp L>;
            key-positions = <4 12 5 13>;
            layers = <0>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <13 12>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <7 14>;
            layers = <0>;
        };

        back {
            bindings = <&kp BACKSPACE>;
            key-positions = <14 13>;
            layers = <0>;
        };

        hankaku {
            bindings = <&kp GRAVE>;
            key-positions = <14 13 12>;
            layers = <0>;
        };

        bikkuri {
            bindings = <&kp EXCLAMATION>;
            key-positions = <3 2>;
            layers = <0>;
        };

        hatena2 {
            bindings = <&kp QUESTION>;
            key-positions = <10 11>;
            layers = <0>;
        };

        seven {
            bindings = <&kp N7>;
            key-positions = <4 5>;
            layers = <1>;
        };

        seventwo {
            bindings = <&kp N7>;
            key-positions = <3 2>;
            layers = <1>;
        };

        eight {
            bindings = <&kp N8>;
            key-positions = <5 6>;
            layers = <1>;
        };

        eighttwo {
            bindings = <&kp N8>;
            key-positions = <2 1>;
            layers = <1>;
        };

        nine {
            bindings = <&kp N9>;
            key-positions = <13 12>;
            layers = <1>;
        };

        zero {
            bindings = <&kp N0>;
            key-positions = <13 14>;
            layers = <1>;
        };

        plus {
            bindings = <&kp LS(SEMI)>;
            key-positions = <4 12>;
            layers = <1>;
        };

        plus2 {
            bindings = <&kp LS(SEMI)>;
            key-positions = <11 3>;
            layers = <1>;
        };

        astrk {
            bindings = <&kp LS(SQT)>;
            key-positions = <5 13>;
            layers = <1>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <6 14>;
            layers = <1>;
        };

        percent {
            bindings = <&kp LS(N5)>;
            key-positions = <6 4>;
            layers = <1>;
        };

        equal {
            bindings = <&kp LS(MINUS)>;
            key-positions = <12 14>;
            layers = <1>;
        };

        equal2 {
            bindings = <&kp LS(MINUS)>;
            key-positions = <11 9>;
            layers = <1>;
        };

        lyamakakko {
            bindings = <&kp LS(COMMA)>;
            key-positions = <5 7>;
            layers = <4>;
        };

        ryamakakko {
            bindings = <&kp LS(DOT)>;
            key-positions = <13 15>;
            layers = <4>;
        };

        and {
            bindings = <&kp LS(N6)>;
            key-positions = <5 6>;
            layers = <5>;
        };

        pipe {
            bindings = <&kp LS(INT3)>;
            key-positions = <6 7>;
            layers = <5>;
        };

        at {
            bindings = <&kp LBKT>;
            key-positions = <13 14>;
            layers = <5>;
        };

        hash {
            bindings = <&kp LS(N3)>;
            key-positions = <14 15>;
            layers = <5>;
        };

        bslash {
            bindings = <&kp INT1>;
            key-positions = <5 13>;
            layers = <5>;
        };

        yen {
            bindings = <&kp INT3>;
            key-positions = <6 14>;
            layers = <5>;
        };

        doll {
            bindings = <&kp LS(N4)>;
            key-positions = <7 15>;
            layers = <5>;
        };

        wintab {
            bindings = <&kp LG(TAB)>;
            key-positions = <4 12>;
            layers = <6>;
        };

        relod {
            bindings = <&kp LC(R)>;
            key-positions = <6 14>;
            layers = <6>;
        };

        search {
            bindings = <&kp LC(F)>;
            key-positions = <7 15>;
            layers = <6>;
        };

        close {
            bindings = <&kp LC(W)>;
            key-positions = <14 12>;
            layers = <6>;
        };

        kaigyou {
            bindings = <&kp LC(ENTER)>;
            key-positions = <14 15>;
            layers = <6>;
        };

        btclr_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <12 13 14 15 18 19>;
            layers = <0>;
        };

        outble2 {
            bindings = <&out OUT_BLE>;
            key-positions = <4 12 4 5 6 13 6 7 14 15>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <15 14 13 12>;
        };

        win {
            bindings = <&kp LEFT_WIN>;
            key-positions = <2 1 3>;
            layers = <3>;
        };

        left {
            bindings = <&kp LG(LEFT)>;
            key-positions = <2 1>;
            layers = <3>;
        };

        right {
            bindings = <&kp LG(RIGHT)>;
            key-positions = <2 3>;
            layers = <3>;
        };

        leftmoni {
            bindings = <&kp LG(LS(LEFT))>;
            key-positions = <9 10>;
            layers = <3>;
        };

        rightmoni {
            bindings = <&kp LG(LS(RIGHT))>;
            key-positions = <10 11>;
            layers = <3>;
        };

        file {
            bindings = <&kp LG(E)>;
            key-positions = <16 17>;
            layers = <3>;
        };

        lock {
            bindings = <&kp LG(L)>;
            key-positions = <17 11>;
            layers = <3>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <6 7 15 14>;
            layers = <0>;
        };
    };

    behaviors {
        mymt_behavior: mymt_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "MYMT_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        mylt_behavior: mylt_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "MYLT_BEHAVIOR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------
            // | SW1 | SW2 | SW3 | SW4 | SW5 | SW6 | SW7 | SW8 |  
            // | SW9 | SW10 | SW11 | SW12 | SW13 | SW14 | SW15 | SW16 |   
            // ------------------------------------------------------------------------------------------

            bindings = <
&mylt_behavior 1 PERIOD  &kp COMMA                    &mylt_behavior 6 U           &mylt_behavior 4 MINUS  &mylt_behavior 4 K  &mylt_behavior 6 R           &kp Y                        &mylt_behavior 1 H
&mylt_behavior 3 E       &mymt_behavior LEFT_SHIFT I  &mymt_behavior LEFT_SHIFT A  &mylt_behavior 5 O      &mylt_behavior 5 T  &mymt_behavior LEFT_SHIFT N  &mymt_behavior LEFT_SHIFT S  &mylt_behavior 3 M
                         &mkp MB2                     &mkp MB1                                                                 &mkp MB1                     &mkp MB2
            >;
        };

        layer_1 {
            bindings = <
&trans  &kp N3  &kp N2  &kp N1  &kp N1  &kp N2  &kp N3  &trans
&none   &kp N6  &kp N5  &kp N4  &kp N4  &kp N5  &kp N6  &none
        &trans  &trans                  &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&to 0  &to 0   &mkp MB2  &mkp MB1  &mkp MB1  &mkp MB2  &to 0   &to 0
&to 0  &to 0   &to 0     &to 0     &to 0     &to 0     &to 0   &to 0
       &trans  &trans                        &trans    &trans
            >;
        };

        layer_3 {
            bindings = <
&kp LC(X)  &kp LC(Z)      &kp LC(R)  &kp LC(Y)  &kp LEFT_GUI    &kp UP_ARROW    &kp LEFT_ALT     &kp TAB
&trans     &kp LC(C)      &kp LC(A)  &kp LC(V)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
           &kp LG(LS(S))  &kp LG(V)                             &trans          &trans
            >;
        };

        layer_4 {
            bindings = <
&kp LS(RBKT)  &kp RBKT  &kp LS(N8)  &trans  &trans  &kp LS(N8)  &kp RBKT  &kp LS(RBKT)
&kp LS(NUHS)  &kp NUHS  &kp LS(N9)  &trans  &trans  &kp LS(N9)  &kp NUHS  &kp LS(NUHS)
              &trans    &trans                      &trans      &trans
            >;
        };

        layer_5 {
            bindings = <
&kp LS(LBKT)  &kp LS(N2)  &kp LS(N7)  &bt BT_NXT  &bt BT_NXT  &kp LS(N7)  &kp LS(N2)  &kp LS(LBKT)
&kp LS(INT1)  &kp SEMI    &kp SQT     &trans      &trans      &kp SQT     &kp SEMI    &kp LS(INT1)
              &trans      &trans                              &trans      &trans
            >;
        };

        layer_6 {
            bindings = <
&kp LC(Z)  &kp LC(C)  &trans     &kp LC(V)  &kp LC(V)  &trans     &kp LC(C)  &kp LC(Z)
&kp LC(Y)  &kp LC(X)  &kp LC(A)  &kp LC(S)  &kp LC(S)  &kp LC(A)  &kp LC(X)  &kp LC(Y)
           &trans     &trans                           &trans     &trans
            >;
        };
    };
};
